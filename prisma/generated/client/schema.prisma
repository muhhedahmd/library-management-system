generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MEMBER
  ADMIN
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
}

model Notification {
  id          String           @id @default(cuid())
  notifierId  String
  notifyingId String
  type        NotificationType
  read        Boolean          @default(false)
  notifier    User             @relation("UserNotifier", fields: [notifierId], references: [id], onDelete: Cascade)
  notifying   User             @relation("UserNotifying", fields: [notifyingId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([notifierId, notifyingId])
  @@map("notifications")
}

enum GENDER {
  MALE
  FEMALE
}

model User {
  id                    String         @id @default(cuid())
  gender                GENDER
  name                  String
  email                 String         @unique
  password              String
  notificationsSent     Notification[] @relation("UserNotifier")
  notificationsReceived Notification[] @relation("UserNotifying")
  role                  UserRole       @default(MEMBER)
  profile               Profile?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  Loan                  Loan[]

  @@map("users")
}

model Profile {
  id              String           @id @default(cuid())
  userId          String           @unique
  bio             String?
  phoneNumber     String?
  isVerified      Boolean          @default(false)
  birthdate       DateTime?
  title           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  profilePictures ProfilePicture[]
  website         Json?            @default("{}")

  @@map("profile")
}

model ProfilePicture {
  id          String   @id @default(cuid())
  url         String
  publicId    String
  assetId     String
  width       Int
  height      Int
  format      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  secureUrl   String
  publicUrl   String
  assetFolder String
  displayName String
  tags        String[]
  hashBlur    String
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id])

  @@unique([profileId])
  @@map("profile-picture")
}

model Book {
  id           String    @id @default(cuid())
  title        String
  description  String?
  isbn         String    @unique
  authorId     String
  author       Author    @relation(fields: [authorId], references: [id])
  publisherId  String
  publisher    Publisher @relation(fields: [publisherId], references: [id])
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  fileUrl      String // URL to the PDF file
  fileSize     Int? // Size of the PDF file in bytes
  fileFormat   String    @default("PDF")
  thumbnailUrl String // URL to the book's thumbnail image
  language     String    @default("English")
  pages        Int?
  publishedAt  DateTime?
  available    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  loans        Loan[]

  @@map("books")
}

model Loan {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  bookId     String
  book       Book       @relation(fields: [bookId], references: [id])
  loanDate   DateTime   @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     LoanStatus @default(ACTIVE)

  @@map("loans")
}

model Author {
  id          String    @id @default(cuid())
  name        String
  bio         String? // Author's biography
  nationality String? // Author's nationality
  birthdate   DateTime? // Author's birthdate
  books       Book[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("authors")
}

model Publisher {
  id        String   @id @default(cuid())
  name      String
  website   String?
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("publishers")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

enum LoanStatus {
  ACTIVE
  RETURNED
}
